// FE/src/pages/AdminUserManagement.jsx

// ======================= IMPORTS =======================
// Import layout & component utilities
import Sidebar from "@/components/admin/AdminSidebar";
import Header from "@/components/Header";

// React hooks
import { useEffect, useState } from "react";

// UI components (Shadcn)
import { Button } from "@/components/ui/button";
import { Plus } from "lucide-react"; // Only Plus is needed here

// Custom admin components
import AdminUserDetail from "@/components/admin/AdUserDetail.jsx";
import AdUserTable from "@/components/admin/AdUserTable.jsx";
import AdUserEdit from "@/components/admin/AdUserEdit.jsx";
import AdUserCreate from "@/components/admin/AdUserCreate.jsx";

// API config & auth hook
import axiosPrivate from "@/api/axios";
import useAuth from "@/hook/useAuth";

// ======================= CONSTANTS =======================
const USERS_URL = "/api/accounts/";
// New API: Automatically generates accountId based on role
const REGISTER_URL = "/api/auto-accounts/register-by-role";

// ======================= MAIN COMPONENT =======================
export default function AdminUserManagement() {
  const { auth } = useAuth();

  // ================== STATE ==================
  // User data and UI state
  const [users, setUsers] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [loading, setLoading] = useState(false);
  const [filterRole, setFilterRole] = useState("all");

  // Dialog & form states
  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
  const [isDetailDialogOpen, setIsDetailDialogOpen] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [editingUser, setEditingUser] = useState(null);

  // Form Data (EXCLUDING 'id' as it's auto-generated by backend)
  const [formData, setFormData] = useState({
    username: "",
    password: "",
    fullname: "",
    gender: "male",
    email: "",
    phone: "",
    role: "sc_technician",
    serviceCenter: "",
  });

  // ================== DATA FETCHING ==================
  // Get list of users from API
  const fetchUsers = async () => {
    try {
      setLoading(true);
      const res = await axiosPrivate.get(USERS_URL);
      setUsers(res.data || []);
    } catch (err) {
      console.error("Error fetching users:", err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchUsers();
  }, []);

  // ================== FORM HANDLERS ==================
  // Handling input form changes
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({ ...prev, [name]: value }));
  };

  // Reset form to original state
  const resetForm = () =>
    setFormData({
      username: "",
      password: "",
      fullname: "",
      gender: "male",
      email: "",
      phone: "",
      role: "sc_technician",
      serviceCenter: "",
    });

  // ================== CRUD HANDLERS ==================
  /** Handle adding a new user (POST)
   * Uses the new API where backend auto-generates accountId
   */
  const handleAddUser = async () => {
    const newUser = {
      username: formData.username,
      password: formData.password,
      fullName: formData.fullname,
      gender: formData.gender === "male",
      email: formData.email,
      phone: formData.phone,
      roleName: formData.role.toUpperCase(),
    };

    try {
      const res = await axiosPrivate.post(REGISTER_URL, newUser);
      const newUserId = res.data?.accountId;

      // 1. Refresh list, close dialog, reset form
      fetchUsers();
      setIsAddDialogOpen(false);
      resetForm();

      // 2. Assign Service Center if selected
      if (formData.serviceCenter && newUserId) {
        await axiosPrivate.post(
          `/api/accounts/assign-service-center/${newUserId}/${formData.serviceCenter}`
        );
        alert("User created and assigned to service center successfully!");
      }
    } catch (err) {
      console.error("Failed to add user:", err);
      alert(
        "Error: " + (err.response?.data?.message || "Failed to create user.")
      );
    }
  };

  /** Handle editing user information (PUT) */
  const handleEditUser = async () => {
    // Safety check
    if (!editingUser) return;

    const updatedUser = {
      username: editingUser.username,
      password: null,
      fullName: formData.fullname,
      gender: formData.gender === "male",
      email: formData.email,
      phone: formData.phone,
    };

    try {
      await axiosPrivate.put(
        `${USERS_URL}${editingUser.accountId}`,
        updatedUser
      );

      setEditingUser(null);
      fetchUsers();
    } catch (err) {
      console.error("Edit user failed:", err);
    }
  };

  /** Toggle Account Status (PATCH/PUT) */
  const toggleUserStatus = async (user) => {
    try {
      const newStatus = !user.enabled;
      await axiosPrivate.put(
        `${USERS_URL}${user.accountId}/status?enabled=${newStatus}`
      );
      fetchUsers();
    } catch (err) {
      console.error("Toggle user status failed:", err);
    }
  };

  // ================== FILTERING ==================
  // Filter user list by search query and selected role
  const filteredUsers = users
    .filter((u) =>
      [u.username, u.fullName, u.email, u.roleName]
        .join(" ")
        .toLowerCase()
        .includes(searchQuery.toLowerCase())
    )
    .filter(
      (u) => filterRole === "all" || u.roleName.toLowerCase() === filterRole
    );

  // ================== UI RENDERING ==================
  return (
    <div className="min-h-screen bg-muted/30">
      <Sidebar />
      <div className="lg:pl-64">
        <Header />
        {/* Điều chỉnh padding chính: sử dụng p-6 và space-y-6 cho khoảng cách 24px */}
        <div className="p-4 md:p-6 lg:p-8"> 
          <div className="space-y-6"> 
            
            {/* Title and Create Button */}
            <div className="flex justify-between items-center">
              <h1 className="text-3xl font-bold text-foreground">
                User Management
              </h1>
              <Button
                className="gap-2 h-9 bg-primary hover:bg-primary/90"
                onClick={() => setIsAddDialogOpen(true)}
              >
                <Plus className="h-4 w-4" />
                Create New User
              </Button>
            </div>

            {/* User table */}
            <AdUserTable
              users={filteredUsers}
              loading={loading}
              onEdit={setEditingUser}
              onToggleStatus={toggleUserStatus}
              onSelectUser={(user) => {
                setSelectedUser(user);
                setIsDetailDialogOpen(true);
              }}
              // Pass Search/Filter states and setters down to AdUserTable
              searchQuery={searchQuery}
              setSearchQuery={setSearchQuery}
              filterRole={filterRole}
              setFilterRole={setFilterRole}
            />
          </div>

          {/* Dialogs */}
          <AdUserCreate
            open={isAddDialogOpen}
            onClose={() => setIsAddDialogOpen(false)}
            onReset={resetForm}
            formData={formData}
            onChange={handleChange}
            onSubmit={handleAddUser}
          />

          <AdUserEdit
            open={!!editingUser}
            formData={formData}
            onClose={() => setEditingUser(null)}
            onChange={handleChange}
            onSubmit={handleEditUser}
            setFormData={setFormData}
            user={editingUser}
          />

          <AdminUserDetail
            open={isDetailDialogOpen}
            onClose={() => setIsDetailDialogOpen(false)}
            user={selectedUser}
            onToggleStatus={toggleUserStatus}
          />
        </div>
      </div>
    </div>
  );
}
